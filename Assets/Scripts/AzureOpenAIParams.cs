// Copyright (c) Microsoft Corporation.
// Licensed under the Microsoft Research License Terms.

using System;
using System.Collections;
using System.Collections.Generic;
using Newtonsoft.Json;

public class AzureOpenAIParams
{
    // Parameters when prompting Azure OpenAI Service
    // https://learn.microsoft.com/en-us/azure/cognitive-services/openai/reference

    // The model to use in the case of OpenAI.com
    public string model = null;

    // The prompt(s) to generate completions for, encoded as a string, a list of strings, or a list of token lists. Note that <\|endoftext\|> is the document separator that the model sees during training, so if a prompt isn't specified the model will generate as if from the beginning of a new document.
    public string prompt = null;

    // The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens can't exceed the model's context length. Most models have a context length of 2048 tokens (except davinci-codex, which supports 4096).
    [JsonProperty("max_tokens")]
    public int maxTokens = 256;

    // What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer. We generally recommend altering this or top_p but not both.
    public float temperature = 0.7f;

    // An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
    [JsonProperty("top_p")]
    public int topP = 0;

    // How many completions to generate for each prompt. Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.
    public int n = 0;

    // Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
    public bool stream = false;

    // Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 10, the API will return a list of the 10 most likely tokens. the API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
    [JsonProperty("logprobs")]
    public int? logProbs = null;

    // Echo back the prompt in addition to the completion
    public bool echo = false;

    // Up to four sequences where the API will stop generating further tokens. The returned text won't contain the stop sequence.
    public string[] stop = null;

    // 	Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    [JsonProperty("presence_penalty")]
    public float presencePenalty = 0f;

    // Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    [JsonProperty("frequency_penalty")]
    public float frequencyPenalty = 0f;

    // Generates best_of completions server-side and returns the "best" (the one with the lowest log probability per token). Results can't be streamed. When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n. Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.
    [JsonProperty("best_of")]
    public int bestOf = 0;

    // Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
    [JsonProperty("logit_bias")]
    public Dictionary<string, int> logitBias = null;

    // Messages when using a chat completion API vs a text completion API.
    [JsonProperty("messages")]
    public List<OpenAIMessage> messages = null;
}

public class OpenAIMessage
{
    [JsonProperty("role")]
    public string role { get; set; }

    [JsonProperty("content")]
    public string content { get; set; }

    public OpenAIMessage(string role, string content)
    {
        this.role = role;
        this.content = content;
    }

    public static string ToJson(List<OpenAIMessage> messages)
    {
        return JsonConvert.SerializeObject(messages, Formatting.Indented);
    }

    public static List<OpenAIMessage> FromJson(string json)
    {
        return JsonConvert.DeserializeObject<List<OpenAIMessage>>(json);
    }
}
